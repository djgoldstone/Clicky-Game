{"version":3,"sources":["App.js","serviceWorker.js","index.js","data.js"],"names":["App","state","players","data","hasBeenClicked","score","hasWon","renderPlayers","_this","map","player","react_default","a","createElement","className","src","url","onClick","handleClick","value","name","shuffleArr","sort","Math","random","e","currentTarget","getAttribute","concat","includes","setState","Object","toConsumableArray","this","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"oRAgDeA,oNA3CbC,MAAQ,CACNC,QAASC,IACTC,eAAgB,GAChBC,MAAO,EACPC,QAAQ,KAEVC,cAAgB,WACd,OAAOC,EAAKP,MAAMC,QAAQO,IAAI,SAAAC,GAAM,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,IAAKL,EAAOM,IAAKC,QAAST,EAAKU,YAAaC,MAAOT,EAAOU,YAE5HC,WAAa,WACXb,EAAKP,MAAMC,QAAQoB,KAAK,WACtB,MAAO,GAAKC,KAAKC,cAGrBN,YAAc,SAAAO,GACZ,IAAIf,EAASe,EAAEC,cAAcC,aAAa,SAC7BnB,EAAKP,MAAMG,eAAewB,OAAOlB,GAC1CF,EAAKP,MAAMG,eAAeyB,SAASnB,GACrCF,EAAKsB,SAAS,CACZzB,MAAO,EACPD,eAAgB,KAGlBI,EAAKsB,SAAS,CACZ1B,eAAc,GAAAwB,OAAAG,OAAAC,EAAA,EAAAD,CAAMvB,EAAKP,MAAMG,gBAAjB,CAAgCM,IAC9CL,MAAOG,EAAKP,MAAMI,MAAQ,IAG9BG,EAAKa,sFAGL,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yBAEEoB,KAAKhC,MAAMG,eAAe8B,SAAWD,KAAKhC,MAAMC,QAAQgC,OAASvB,EAAAC,EAAAC,cAAA,gCAA8BF,EAAAC,EAAAC,cAAA,kCAA0BoB,KAAKhC,MAAMI,OAErI4B,KAAK1B,wBAtCI4B,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gCExGnBC,EAAOC,QA3BI,CACP,CACIlC,KAAM,QACNJ,IAAK,mMAET,CACII,KAAM,WACNJ,IAAK,qFAET,CACII,KAAM,OACNJ,IAAK,0GAET,CACII,KAAM,OACNJ,IAAK,kEAET,CACII,KAAM,QACNJ,IAAK,oHAET,CACII,KAAM,UACNJ,IAAK","file":"static/js/main.d0ef01dc.chunk.js","sourcesContent":["import React from 'react';\nimport data from './data';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    players: data,\n    hasBeenClicked: [],\n    score: 0,\n    hasWon: false\n  }\n  renderPlayers = () => {\n    return this.state.players.map(player => <img className=\"player\" src={player.url} onClick={this.handleClick} value={player.name}/>)\n  }\n  shuffleArr = () => {\n    this.state.players.sort(function() {\n      return .5 - Math.random();\n    });\n  }\n  handleClick = e => {\n    let player = e.currentTarget.getAttribute(\"value\");\n    let newArr = this.state.hasBeenClicked.concat(player);\n    if (this.state.hasBeenClicked.includes(player)) {\n      this.setState({\n        score: 0,\n        hasBeenClicked: []\n      })\n    } else {\n      this.setState({\n        hasBeenClicked: [...this.state.hasBeenClicked,player], \n        score: this.state.score + 1\n      })\n    }\n    this.shuffleArr();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Clicky Game</h1>\n        {\n          this.state.hasBeenClicked.length === this.state.players.length ? <h2>Congrats, you won!</h2> : <h2>Your Current Streak: {this.state.score}</h2>\n        }\n        {this.renderPlayers()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var data = [\n    {\n        name: \"Steph\",\n        url: \"https://cdn.vox-cdn.com/thumbor/1thMmPszN41RyZsjsoHTXwJEczM=/0x0:3552x5057/1200x800/filters:focal(1507x1263:2075x1831)/cdn.vox-cdn.com/uploads/chorus_image/image/63411102/1142665343.jpg.0.jpg\"\n    },\n    {\n        name: \"Draymond\",\n        url: \"https://thespun.com/wp-content/uploads/2019/04/GettyImages-1083447708-775x465.jpg\"\n    },\n    {\n        name: \"Klay\",\n        url: \"https://www.mercurynews.com/wp-content/uploads/2019/02/BNG-L-WARRIORS-0112-11-e1549016436322.jpg?w=620\"\n    }, \n    {\n        name: \"Loon\",\n        url: \"https://www.foxsportsasia.com/uploads/2019/07/looney-kevon.jpg\"\n    }, \n    {\n        name: \"Jacob\",\n        url: \"https://usatwarriorswire.files.wordpress.com/2018/07/gettyimages-993529780.jpg?w=1000&h=600&crop=1?w=1000&crop=0\"\n    },\n    {\n        name: \"Alfonzo\",\n        url: \"https://www.sfexaminer.com/wp-content/uploads/2019/04/16541129_web1_Alfonzo-McKinnie_1.jpg\"\n    }\n];\n\nmodule.exports = data;"],"sourceRoot":""}